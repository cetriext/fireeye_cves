{
  "information": {
    "description": [
      {
        "id": "CVE-2017-11774",
        "parameters": {
          "published": "2017-10-13T13:29Z",
          "modified": "2019-07-11T19:15Z",
          "summary": "Microsoft Outlook 2010 SP2, Outlook 2013 SP1 and RT SP1, and Outlook 2016 allow an attacker to execute arbitrary commands, due to how Microsoft Office handles objects in memory, aka \"Microsoft Outlook Security Feature Bypass Vulnerability.\""
        }
      }
    ],
    "references": [
      {
        "vendor": "BID",
        "url": "http://www.securityfocus.com/bid/101098"
      },
      {
        "vendor": "SECTRACK",
        "url": "http://www.securitytracker.com/id/1039542"
      },
      {
        "vendor": "CONFIRM",
        "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11774"
      },
      {
        "vendor": "MISC",
        "url": "https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/"
      }
    ]
  },
  "classification": {
    "targets": [
      {
        "id": 1,
        "parameters": [
          {
            "title": null,
            "cpe2.2": "cpe:/a:microsoft:outlook:2010:sp2",
            "cpe2.3": "cpe:2.3:a:microsoft:outlook:2010:sp2:*:*:*:*:*:*",
            "version_affected": {
              "from": "",
              "to": ""
            }
          },
          {
            "title": "Microsoft Outlook 2013 Service Pack 1",
            "cpe2.2": "cpe:/a:microsoft:outlook:2013:sp1",
            "cpe2.3": "cpe:2.3:a:microsoft:outlook:2013:sp1:*:*:*:*:*:*",
            "version_affected": {
              "from": "",
              "to": ""
            }
          },
          {
            "title": "Microsoft Outlook 2016",
            "cpe2.2": "cpe:/a:microsoft:outlook:2016",
            "cpe2.3": "cpe:2.3:a:microsoft:outlook:2016:*:*:*:*:*:*:*",
            "version_affected": {
              "from": "",
              "to": ""
            }
          },
          {
            "title": null,
            "cpe2.2": "cpe:/a:microsoft:outlook_2013_rt::sp1",
            "cpe2.3": "cpe:2.3:a:microsoft:outlook_2013_rt:*:sp1:*:*:*:*:*:*",
            "version_affected": {
              "from": "",
              "to": ""
            }
          }
        ]
      }
    ],
    "packages": [
      {
        "microsoft": [
          {
            "product": "outlook",
            "version": {
              "affected": "2010",
              "condition": "equal"
            }
          },
          {
            "product": "outlook",
            "version": {
              "affected": "2013",
              "condition": "equal"
            }
          },
          {
            "product": "outlook",
            "version": {
              "affected": "2016",
              "condition": "equal"
            }
          },
          {
            "product": "outlook 2013 rt",
            "version": {
              "affected": "*",
              "condition": "equal"
            }
          }
        ]
      }
    ],
    "weaknesses": [
      {
        "id": "CWE-119",
        "parameters": {
          "class": "weakness",
          "title": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
          "relationship": "CWE-20,CWE-118",
          "url": "https://cwe.mitre.org/data/definitions/119.html",
          "attack_patterns": [
            {
              "id": "CAPEC-9",
              "parameters": {
                "title": "Buffer Overflow in Local Command-Line Utilities",
                "attack_methods": "",
                "mitigations": "Do not unnecessarily expose services.|Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.|Operational: Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.",
                "url": "https://capec.mitre.org/data/definitions/9.html"
              }
            },
            {
              "id": "CAPEC-8",
              "parameters": {
                "title": "Buffer Overflow in an API Call",
                "attack_methods": "",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|If you have to use dangerous functions, make sure that you do boundary checking.|Use secure functions not vulnerable to buffer overflow.|Use a language or compiler that performs automatic bounds checking.",
                "url": "https://capec.mitre.org/data/definitions/8.html"
              }
            },
            {
              "id": "CAPEC-47",
              "parameters": {
                "title": "Buffer Overflow via Parameter Expansion",
                "attack_methods": "",
                "mitigations": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
                "url": "https://capec.mitre.org/data/definitions/47.html"
              }
            },
            {
              "id": "CAPEC-46",
              "parameters": {
                "title": "Overflow Variables and Tags",
                "attack_methods": "",
                "mitigations": "Do not trust input data from user. Validate all user input.|Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.",
                "url": "https://capec.mitre.org/data/definitions/46.html"
              }
            },
            {
              "id": "CAPEC-45",
              "parameters": {
                "title": "Buffer Overflow via Symbolic Links",
                "attack_methods": "",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Always check the size of the input data before copying to a buffer.|Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.|Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.|Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.",
                "url": "https://capec.mitre.org/data/definitions/45.html"
              }
            },
            {
              "id": "CAPEC-44",
              "parameters": {
                "title": "Overflow Binary Resource File",
                "attack_methods": "",
                "mitigations": "Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.|Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes|Design: Static code analysis|Design: Enforce principle of least privilege|Perform appropriate bounds checking on all buffers.",
                "url": "https://capec.mitre.org/data/definitions/44.html"
              }
            },
            {
              "id": "CAPEC-42",
              "parameters": {
                "title": "MIME Conversion",
                "attack_methods": "",
                "mitigations": "Use mail.local|Use the sendmail restricted shell program (smrsh)||Stay up to date with third party vendor patches",
                "url": "https://capec.mitre.org/data/definitions/42.html"
              }
            },
            {
              "id": "CAPEC-24",
              "parameters": {
                "title": "Filter Failure through Buffer Overflow",
                "attack_methods": "",
                "mitigations": "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.|Operational: Use OS-level preventative functionality. Not a complete solution.|Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Pre-design: Use a language or compiler that performs automatic bounds checking.|Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
                "url": "https://capec.mitre.org/data/definitions/24.html"
              }
            },
            {
              "id": "CAPEC-14",
              "parameters": {
                "title": "Client-side Injection-induced Buffer Overflow",
                "attack_methods": "",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Ensure all buffer uses are consistently bounds-checked.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Perform input validation for length of buffer inputs.|The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.|The client software should not install untrusted code from a non-authenticated server.",
                "url": "https://capec.mitre.org/data/definitions/14.html"
              }
            },
            {
              "id": "CAPEC-123",
              "parameters": {
                "title": "Buffer Manipulation",
                "attack_methods": "",
                "mitigations": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
                "url": "https://capec.mitre.org/data/definitions/123.html"
              }
            },
            {
              "id": "CAPEC-100",
              "parameters": {
                "title": "Overflow Buffers",
                "attack_methods": "",
                "mitigations": "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.|Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|If you have to use dangerous functions, make sure that you do boundary checking.|Use secure functions not vulnerable to buffer overflow.|Use a language or compiler that performs automatic bounds checking.",
                "url": "https://capec.mitre.org/data/definitions/100.html"
              }
            },
            {
              "id": "CAPEC-10",
              "parameters": {
                "title": "Buffer Overflow via Environment Variables",
                "attack_methods": "",
                "mitigations": "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.|Use a language or compiler that performs automatic bounds checking|Do not use untrusted data in your environment variables.|Do not expose environment variable to the user.",
                "url": "https://capec.mitre.org/data/definitions/10.html"
              }
            }
          ],
          "ranking": {
            "categorization": [
              {
                "id": "CWE-1003",
                "parameters": {
                  "title": "Weaknesses for Simplified Mapping of Published Vulnerabilities",
                  "url": "https://cwe.mitre.org/data/definitions/1003.html"
                }
              },
              {
                "id": "CWE-1157",
                "parameters": {
                  "title": "SEI CERT C Coding Standard - Guidelines 03. Expressions (EXP)",
                  "url": "https://cwe.mitre.org/data/definitions/1157.html"
                }
              },
              {
                "id": "CWE-1160",
                "parameters": {
                  "title": "SEI CERT C Coding Standard - Guidelines 06. Arrays (ARR)",
                  "url": "https://cwe.mitre.org/data/definitions/1160.html"
                }
              },
              {
                "id": "CWE-1161",
                "parameters": {
                  "title": "SEI CERT C Coding Standard - Guidelines 07. Characters and Strings (STR)",
                  "url": "https://cwe.mitre.org/data/definitions/1161.html"
                }
              },
              {
                "id": "CWE-1200",
                "parameters": {
                  "title": "Weaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors",
                  "url": "https://cwe.mitre.org/data/definitions/1200.html"
                }
              },
              {
                "id": "CWE-1306",
                "parameters": {
                  "title": "CISQ Quality Measures - Reliability",
                  "url": "https://cwe.mitre.org/data/definitions/1306.html"
                }
              },
              {
                "id": "CWE-1308",
                "parameters": {
                  "title": "CISQ Quality Measures - Security",
                  "url": "https://cwe.mitre.org/data/definitions/1308.html"
                }
              },
              {
                "id": "CWE-1350",
                "parameters": {
                  "title": "Weaknesses in the 2020 CWE Top 25 Most Dangerous Software Weaknesses",
                  "url": "https://cwe.mitre.org/data/definitions/1350.html"
                }
              },
              {
                "id": "CWE-635",
                "parameters": {
                  "title": "Weaknesses Originally Used by NVD from 2008 to 2016",
                  "url": "https://cwe.mitre.org/data/definitions/635.html"
                }
              },
              {
                "id": "CWE-726",
                "parameters": {
                  "title": "OWASP Top Ten 2004 Category A5 - Buffer Overflows",
                  "url": "https://cwe.mitre.org/data/definitions/726.html"
                }
              },
              {
                "id": "CWE-740",
                "parameters": {
                  "title": "CERT C Secure Coding Standard (2008) Chapter 7 - Arrays (ARR)",
                  "url": "https://cwe.mitre.org/data/definitions/740.html"
                }
              },
              {
                "id": "CWE-741",
                "parameters": {
                  "title": "CERT C Secure Coding Standard (2008) Chapter 8 - Characters and Strings (STR)",
                  "url": "https://cwe.mitre.org/data/definitions/741.html"
                }
              },
              {
                "id": "CWE-742",
                "parameters": {
                  "title": "CERT C Secure Coding Standard (2008) Chapter 9 - Memory Management (MEM)",
                  "url": "https://cwe.mitre.org/data/definitions/742.html"
                }
              },
              {
                "id": "CWE-743",
                "parameters": {
                  "title": "CERT C Secure Coding Standard (2008) Chapter 10 - Input Output (FIO)",
                  "url": "https://cwe.mitre.org/data/definitions/743.html"
                }
              },
              {
                "id": "CWE-744",
                "parameters": {
                  "title": "CERT C Secure Coding Standard (2008) Chapter 11 - Environment (ENV)",
                  "url": "https://cwe.mitre.org/data/definitions/744.html"
                }
              },
              {
                "id": "CWE-752",
                "parameters": {
                  "title": "2009 Top 25 - Risky Resource Management",
                  "url": "https://cwe.mitre.org/data/definitions/752.html"
                }
              },
              {
                "id": "CWE-874",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 06 - Arrays and the STL (ARR)",
                  "url": "https://cwe.mitre.org/data/definitions/874.html"
                }
              },
              {
                "id": "CWE-875",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 07 - Characters and Strings (STR)",
                  "url": "https://cwe.mitre.org/data/definitions/875.html"
                }
              },
              {
                "id": "CWE-876",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 08 - Memory Management (MEM)",
                  "url": "https://cwe.mitre.org/data/definitions/876.html"
                }
              },
              {
                "id": "CWE-877",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 09 - Input Output (FIO)",
                  "url": "https://cwe.mitre.org/data/definitions/877.html"
                }
              },
              {
                "id": "CWE-878",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 10 - Environment (ENV)",
                  "url": "https://cwe.mitre.org/data/definitions/878.html"
                }
              }
            ],
            "wasc": [
              {
                "id": "WASC-07",
                "parameters": {
                  "title": "Buffer Overflow",
                  "url": "http://projects.webappsec.org/Buffer-Overflow"
                }
              }
            ],
            "att&ck_mitre": []
          }
        }
      }
    ]
  },
  "risk": {
    "cvss": {
      "cvss2": {
        "vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
        "base_score": "6.8",
        "impact_score": "6.4",
        "exploit_score": "8.6",
        "access_vector": "NETWORK",
        "access_complexity": "MEDIUM",
        "authentication": "NONE",
        "confidentiality_impact": "PARTIAL",
        "integrity_impact": "PARTIAL",
        "availability_impact": "PARTIAL"
      },
      "cvss3": {
        "vector": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "base_score": "7.8",
        "impact_score": "5.9",
        "exploit_score": "1.8",
        "attack_vector": "LOCAL",
        "attack_complexity": "LOW",
        "privileges_required": "NONE",
        "user_interaction": "REQUIRED",
        "score": "UNCHANGED",
        "confidentiality_impact": "HIGH",
        "integrity_impact": "HIGH",
        "availability_impact": "HIGH"
      }
    }
  },
  "inspection": {
    "remote": [
      {
        "nessus": [
          {
            "id": "103752",
            "parameters": {
              "family": "Windows : Microsoft Bulletins",
              "name": "Security Updates for Outlook (October 2017)",
              "file": "smb_nt_ms17_oct_outlook.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=103752"
            }
          }
        ]
      },
      {
        "openvas": [
          {
            "id": "812028",
            "parameters": {
              "family": "Windows : Microsoft Bulletins",
              "name": "Microsoft Outlook 2013 Service Pack 1 Security Feature Bypass Vulnerability (KB4011178)",
              "file": "gb_ms_kb4011178.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=812028"
            }
          },
          {
            "id": "812024",
            "parameters": {
              "family": "Windows : Microsoft Bulletins",
              "name": "Microsoft Outlook 2010 Service Pack 2 Security Feature Bypass Vulnerability (KB4011196)",
              "file": "gb_ms_kb4011196.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=812024"
            }
          },
          {
            "id": "811922",
            "parameters": {
              "family": "Windows : Microsoft Bulletins",
              "name": "Microsoft Outlook 2016 Multiple Vulnerabilities (KB4011162)",
              "file": "gb_ms_kb4011162.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=811922"
            }
          }
        ]
      }
    ],
    "local": [
      {
        "oval-cis": [
          {
            "id": "oval:org.cisecurity:def:3464",
            "parameters": {
              "family": "vulnerability",
              "name": "Microsoft Outlook Security Feature Bypass Vulnerability \u2013 CVE-2017-11774",
              "file": "oval_org.cisecurity_def_3464.xml",
              "url": "https://oval.cisecurity.org/repository/search/definition/oval:org.cisecurity:def:3464"
            }
          }
        ]
      }
    ]
  },
  "exploitation": [
    {
      "github": [
        {
          "id": "202635955",
          "parameters": {
            "title": "used to generate a valid attack chain to exploit CVE-2017-11774 tied to iranian apt only reasearch poc dont use for harm please",
            "file": "https://github.com/devcoinfet/SniperRoost",
            "url": "https://github.com/devcoinfet/SniperRoost"
          }
        }
      ]
    }
  ],
  "defense": {
    "preventive": [
      {
        "bid": [
          {
            "id": "101098",
            "parameters": {
              "class": "bulletin",
              "url": "http://www.securityfocus.com/bid/101098"
            }
          }
        ]
      },
      {
        "microsoft": [
          {
            "id": "4011162",
            "parameters": {
              "class": "fix",
              "url": "https://support.microsoft.com/help/4011162"
            }
          },
          {
            "id": "4011178",
            "parameters": {
              "class": "fix",
              "url": "https://support.microsoft.com/help/4011178"
            }
          },
          {
            "id": "4011196",
            "parameters": {
              "class": "fix",
              "url": "https://support.microsoft.com/help/4011196"
            }
          },
          {
            "id": "CVE-2017-11774",
            "parameters": {
              "class": "bulletin",
              "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11774"
            }
          }
        ]
      }
    ],
    "detective": [
      {
        "juniper": [
          {
            "id": "HTTP:STC:OUTLOOK:CVE-2017-11774",
            "parameters": {
              "class": "HTTP",
              "title": "This signature detects attempts to exploit a known vulnerability against Microsoft outlook. A successful attack can lead to arbitrary code execution.",
              "url": "https://threatlabs.juniper.net/home/search/#/details/?sigtype=ips&sigid=HTTP:STC:OUTLOOK:CVE-2017-11774"
            }
          }
        ]
      },
      {
        "snort": [
          {
            "id": "8422",
            "parameters": {
              "class": "attempted-user",
              "title": "BROWSER-PLUGINS Microsoft Office Outlook View OVCtl ActiveX clsid access",
              "url": "https://snort.org/rule_docs/1-8422/"
            }
          },
          {
            "id": "8068",
            "parameters": {
              "class": "attempted-user",
              "title": "BROWSER-PLUGINS Microsoft Windows Scripting Host Shell ActiveX function call access",
              "url": "https://snort.org/rule_docs/1-8068/"
            }
          }
        ]
      }
    ]
  }
}